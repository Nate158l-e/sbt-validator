vars.projectsAll: [
{
  check-missing: [ false, false ]
  cross-version: [ standard, standard ]
  space.from: [ sbt212, sbtplugins212 ]
  space.to: sbt212
  sbt-java-options: [ "-Dsbt.gigahorse=false", "-Xms512M", "-Xmx5120M", "-Xss1M" ]
  extraction-version: ${vars.scala212-version}

  projects: [
    {
      name: scala-212
      system: assemble
      space.to: "sbt212"
      extra.parts.cross-version: standard
      extra.parts.projects: [
        {
          set-version: ${vars.scala212-version}
          name:   scala212-library
          system: aether
          uri:   "aether:org.scala-lang#scala-library;"${vars.scala212-version}
          extra.sources: true  // Scala.js wants this
        }
        {
          set-version: ${vars.scala212-version}
          name:   scala212-reflect
          system: aether
          uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala212-version}
        }
        {
          set-version: ${vars.scala212-version}
          name:   scala212-compiler
          system: aether
          uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala212-version}
        }
        {
          set-version: ${vars.scala212-xml-version}
          name:   scala212-xml
          system: aether
          uri:   "aether:org.scala-lang.modules#scala-xml_"${vars.scala212-bin-version}";"${vars.scala212-xml-version}
        }
        {
          set-version: ${vars.scala212-par-comb-version}
          name:   scala212-par-comb
          system: aether
          uri:   "aether:org.scala-lang.modules#scala-parser-combinators_"${vars.scala212-bin-version}";"${vars.scala212-par-comb-version}
        }
      ]
    }
    ${vars.sbt}     { name: sbt212 }
    ${vars.io}      { name: sbt212-io }
    ${vars.util}    {
      name: sbt212-util
      extra.exclude: utilInterface
    }
    ${vars.util}    {
      name: sbt212-util-interface
      extra.projects: utilInterface // java-only, we publish it to the sbt 211 space as well
      space: {
        from: sbt212
        to: [ sbt212, sbt211 ]
      }
    }
    ${vars.lib}     { name: sbt212-librarymanagement }
    ${vars.zinc}    {
      name: sbt212-zinc
      extra.exclude: [
        compilerBridge211, compilerBridgeTest211, compilerInterface211, zincApiInfo211, zincClassfile211, zincClasspath211,
        compilerBridge210, compilerBridgeTest210, compilerInterface210, zincApiInfo210, zincClassfile210, zincClasspath210,
        compilerBridge213, compilerInterface213,
        compilerBridgeTemplate, compilerBridgeTestTemplate, zincApiInfoTemplate, zincClassfileTemplate, zincClasspathTemplate,
        bloopScripted ]
    }
  ]
}
{
  check-missing: [ false, false ]
  cross-version: [ standard, standard ]
  space.from: [ sbt211, sbtplugins211 ]
  space.to: sbt211
  sbt-java-options: [ "-Dsbt.gigahorse=false", "-Xms512M", "-Xmx5120M", "-Xss1M" ]
  extraction-version: ${vars.scala211-version}

  projects: [
    {
      name: scala-211
      system: assemble
      space.to: "sbt211"
      extra.parts.cross-version: standard
      extra.parts.projects: [
        {
          set-version: ${vars.scala211-version}
          name:   scala211-library
          system: aether
          uri:   "aether:org.scala-lang#scala-library;"${vars.scala211-version}
          extra.sources: true  // Scala.js wants this
        }
        {
          set-version: ${vars.scala211-version}
          name:   scala211-reflect
          system: aether
          uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala211-version}
        }
        {
          set-version: ${vars.scala211-version}
          name:   scala211-compiler
          system: aether
          uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala211-version}
        }
        {
          set-version: ${vars.scala211-xml-version}
          name:   scala211-xml
          system: aether
          uri:   "aether:org.scala-lang.modules#scala-xml_"${vars.scala211-bin-version}";"${vars.scala211-xml-version}
        }
        {
          set-version: ${vars.scala211-par-comb-version}
          name:   scala211-par-comb
          system: aether
          uri:   "aether:org.scala-lang.modules#scala-parser-combinators_"${vars.scala211-bin-version}";"${vars.scala211-par-comb-version}
        }
      ]
    }
    ${vars.io}      { name: sbt211-io }
    ${vars.util}    {
      name: sbt211-util
      extra.exclude: utilInterface // not cross-compiled (Java-only), so we keep only the 2.12 version
    }
    ${vars.lib}     { name: sbt211-librarymanagement }
    ${vars.zinc}    {
      name: sbt211-zinc
      extra.projects:
        [ compilerBridge211, compilerBridgeTest211, compilerInterface211, zincApiInfo211, zincClassfile211, zincClasspath211 ]
    }
  ]
}
{
  check-missing: [ false, false ]
  cross-version: [ standard, standard ]
  space.from: [ sbt210, sbtplugins210 ]
  space.to: sbt210
  sbt-java-options: [ "-Dsbt.gigahorse=false", "-Xms512M", "-Xmx5120M", "-Xss1M" ]
  extraction-version: ${vars.scala210-version}

  projects: [
    {
      name: scala-210
      system: assemble
      space.to: "sbt210"
      extra.parts.cross-version: standard
      extra.parts.projects: [
        {
          set-version: ${vars.scala210-version}
          name:   scala210-library
          system: aether
          uri:   "aether:org.scala-lang#scala-library;"${vars.scala210-version}
          extra.sources: true  // Scala.js wants this
        }
        {
          set-version: ${vars.scala210-version}
          name:   scala210-reflect
          system: aether
          uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala210-version}
        }
        {
          set-version: ${vars.scala210-version}
          name:   scala210-compiler
          system: aether
          uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala210-version}
        }
        {
          set-version: ${vars.scala210-version}
          name:   scala210-partest
          system: aether
          uri:   "aether:org.scala-lang#scala-partest;"${vars.scala210-version}
        }
        {
          set-version: ${vars.scala210-version}
          name:   scala210-jline
          system: aether
          uri:   "aether:org.scala-lang#jline;"${vars.scala210-version}
        }
      ]
    }
    ${vars.io}      { name: sbt210-io }
    ${vars.util}    {
      name: sbt210-util
      extra.projects: utilLogging // no other subprojects in util are compiled for 2.10
    }
    // librarymanagement is only for 2.11/2.12, so omitted
    ${vars.zinc}    {
      name: sbt210-zinc
      extra.projects:
        [ compilerBridge210, compilerBridgeTest210, compilerInterface210, zincApiInfo210, zincClassfile210, zincClasspath210 ]
    }
  ]
}
{
  check-missing: [ false, false ]
  cross-version: [ standard, standard ]
  space.from: [ sbt213, sbtplugins213 ]
  space.to: sbt213
  sbt-java-options: [ "-Dsbt.gigahorse=false", "-Xms512M", "-Xmx5120M", "-Xss1M" ]
  extraction-version: ${vars.scala213-version}

  projects: [
    {
      name: scala-213
      system: assemble
      space.to: "sbt213"
      extra.parts.cross-version: standard
      extra.parts.projects: [
        {
          set-version: ${vars.scala213-version}
          name:   scala213-library
          system: aether
          uri:   "aether:org.scala-lang#scala-library;"${vars.scala213-version}
          extra.sources: true  // Scala.js wants this
        }
        {
          set-version: ${vars.scala213-version}
          name:   scala213-reflect
          system: aether
          uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala213-version}
        }
        {
          set-version: ${vars.scala213-version}
          name:   scala213-compiler
          system: aether
          uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala213-version}
        }
      ]
    }
//    {
//      name:   scala213-xml
//      system: aether
//      uri:   "aether:org.scala-lang.modules#scala-xml_"${vars.scala213-version}";"${vars.scala213-xml-version}
//    }
//    {
//      name:   scala213-par-comb
//      system: aether
//      uri:   "aether:org.scala-lang.modules#scala-parser-combinators_"${vars.scala213-version}";"${vars.scala213-par-comb-version}
//    }
    ${vars.io}      { name: sbt213-io }
    ${vars.zinc}    {
      name: sbt213-zinc
      extra.projects:
        [ compilerBridge213, compilerInterface213 ]
    }
  ]
}
]




vars.deployProjectsAll: [
//    {
//      from: sbt211-util,
//      subprojects: [utilCache, utilControl, utilLogging, utilPosition, utilRelation, utilRoot, utilScripted, utilTesting, utilTracking]
//    },
//    {
//      from: sbt211-zinc,
//      subprojects: [ classesDep1, compilerBridge, compilerBridgeTest, jar1, jar2, zinc, zincApiInfo, zincBenchmarks, zincClassfile, zincClasspath, zincCompile, zincCompileCore, zincCore, zincIvyIntegration, zincPersist, zincRoot, zincScripted, zincTesting ]
//    },
//    sbt211-io, sbt211-librarymanagement,
    sbt211-io, sbt211-util, sbt211-librarymanagement, sbt211-zinc,
    sbt210-io, sbt210-util, sbt210-zinc,
    sbt213-io, sbt213-zinc,
    sbt212, sbt212-io, sbt212-util, sbt212-librarymanagement, sbt212-zinc ]

vars.bintrayDeployAll: {
  projects: ${vars.deployProjectsAll}
  uri: "bintray:/sbt/maven-snapshots/jenkins-sbt/"${TIMESTAMP}"#release"
  credentials: "/home/jenkinssbt/.bintray/.credentials"
} 

# Currently not deploying to Artifactory
#  artifactoryDeployUri: "https://proxy-ch.typesafe.com:8082/artifactory/sbt-snapshots"
#  artifactoryDeployCredentials: "/home/jenkinssbt/...../.credentials"

vars.localDeployAll: {
  projects: ${vars.deployProjectsAll}
  uri: "ssh://a1/localhome/jenkinssbt/sbt-snapshots"
  credentials: "localCredentials.txt"
}
